Big O Analysis

1) Task0 is O(n) because each loop is O(n) and there are two loops
for O(2n) which reduces to O(n).

2) Task1 is O(n^2). As inner loop grows in the worst case it will approach n
   for an average of 1/2n times so n*1/2n = n^2

3) Task2 is O(n^2) due to the unique_numbers method from above.

4) Task3 is O(n). It has 3 O(n) loops which add to O(3n) and reduces to O(n)

5) Task4 is O(n^2) due to several inner O(n) loops that have two loops
